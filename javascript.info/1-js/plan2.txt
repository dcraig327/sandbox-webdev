getting-started
  introduction
  editor
  devtools
first-steps
  hello-world (intro, ext scripts)
  structure
  use strict
  variables (const, name things right)
  types (no objects, but typeof)
  type-conversions (conversions string/number/boolean, no objects)
  operators
  comparison (no objects)
  uibasic
  logical-ops
  while-for (labels, no objects)
  switch
  function-basics (decl, shadowing,  naming, default params)
  function-expressions-arrows (function expr, arrow, todo: move new Function out of this?)
  javascript-specials (TODO, remove it? migrate all function* to separate chapter?)
object-basics
  object(props, for-in, refs, assign)
  garbage-collection
  object-methods (this, method syntax, no call/apply)
  primitives-methods (on-the-fly objects)
  symbol
  object-toprimitive
  array
  iterable
more-syntax
  function-arguments-rest-spread
  destructuring-assignment (also func params destructuring)
  advanced-loops (iterators over objects, arrays)
code-quality
  debugging-chrome (TODO)
  coding-style (TODO)
  write-unmaintainable-code (TODO)
  test-driven-development (TODO)
  polyfills (TODO)
data-structures
  number (rounding, precision, isFinite, isNaN, parse*, Math.*)
  string (quotes, search, substring, tagged template notice)
  object 
    - WHAT HERE?
    - can add prototypes or more
  array-methods (TODO: translate tasks)
  date (TODO: tasks)
  map-set-weakmap-weakset
  
-------

<<< json? 
<<< descriptors (TODO: LATER, need JSON to output, better after inheritance to explain getOwnProps)
<<< getter setter
<<< NFE?
<<< 
<<< call/apply?

func.name + NFE - together
closures need function objects
NFE need recursion
scheduling needs recursion, closures

recursion (
  running execution context = where + lexical environment = envrec + outer
  context stack
  pow task
  traverse list task
    task: traverse list back
)

closures
  LE outer
  returning a function
  -not function props
  new Function?
  counter object?


<<< memory management of closures?  (AFTER CLOSURES! Сюрприз нельзя получить!!!)


function-object
  name property (obj props, methods, assignments - set it)
  length property
  custom properties

new function

scheduling: settimeout, setinterval
  recursive settimeout

<<< bind, fixing context

<<< call/apply, decorators


constructors
classes
instanceof

после 4-object сделать 
  descriptors



more-features
  try..catch
  setTimeout
  JSON


======
A global environment is a Lexical Environment which does not have an outer environment. The global environment's outer environment reference is null. A global environment's EnvironmentRecord may be prepopulated with identifier bindings and includes an associated global object whose properties provide some of the global environment's identifier bindings.  (window has SOME global env bindings!!!)
=====
class A extends Object != class A
